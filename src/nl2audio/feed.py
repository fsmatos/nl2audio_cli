from __future__ import annotations
from pathlib import Path
from typing import Iterable
from feedgen.feed import FeedGenerator
import time
import os
from datetime import datetime, timezone

def build_feed(output_dir: Path, feed_title: str, site_url: str, episodes: list[tuple]) -> Path:
    # episodes: list of tuples like DB.list_episodes rows
    fg = FeedGenerator()
    fg.title(feed_title)
    fg.link(href=site_url, rel='alternate')
    fg.description(f"{feed_title} â€” generated by nl2audio")
    fg.load_extension('podcast')

    for (id_, title, created_at, source, hash_, mp3_path, duration_sec) in episodes:
        fe = fg.add_entry()
        fe.id(hash_)
        fe.title(title)
        fe.link(href=source or site_url)
        # Convert struct_time to datetime for feedgen
        if isinstance(created_at, (int, float)):
            dt = datetime.fromtimestamp(created_at, tz=timezone.utc)
        else:
            dt = datetime.fromtimestamp(time.mktime(created_at), tz=timezone.utc)
        fe.pubDate(dt)
        # enclosure
        mp3_name = os.path.basename(mp3_path)
        href = f"{site_url.rstrip('/')}/{mp3_name}"
        fe.enclosure(url=href, length=str(Path(mp3_path).stat().st_size), type='audio/mpeg')

    xml_path = output_dir / "feed.xml"
    fg.rss_file(str(xml_path), pretty=True)
    return xml_path